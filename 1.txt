eventFilter (2098~2337줄):
마우스 이동, 버튼 클릭, 창 상태 변경, 리사이징, 드래그 등 다양한 이벤트 처리
show_image (1129~1257줄):
이미지 로딩, 비디오 정지, UI 업데이트, 파일 타입 확인, 타입별 처리 분기
toggle_fullscreen (2338~2433줄):
전체화면 모드 전환, UI 상태 관리, 비디오 상태 처리
delayed_resize (944~995줄):
미디어 타입별 리사이징 로직(이미지, GIF, WEBP, 비디오)
rotate_image (3059~3145줄):
미디어 타입별 회전 처리 로직
keyPressEvent (2023~2070줄):
다양한 키 이벤트 처리를 한 함수에서 처리
resizeEvent (839~943줄):
창 크기 조정 시 UI 요소, 오버레이, 메시지 레이블 등 다양한 요소 조정
__init__ (65~754줄):
지나치게 긴 초기화 함수로 UI 생성, 이벤트 연결, 변수 초기화 등 여러 책임
setup_custom_ui (2816~2862줄):
버튼 크기 설정, 스타일 적용, 이벤트 연결 등 여러 UI 관련 로직
update_button_sizes (3146~3229줄):
폴더 버튼, 슬라이더 컨트롤 등 다양한 UI 요소 크기 조정
show_gif (1258~1419줄):
애니메이션 로딩, 회전 처리, 슬라이더 설정, 타이머 관리 등
show_webp (1420~1598줄):
WEBP 애니메이션/이미지 로딩, 회전 처리, 슬라이더 설정, 타이머 관리
closeEvent (2466~2526줄):
비디오 정지, 스레드 종료, 캐시 정리, 책갈피 저장 등 여러 리소스 정리
on_image_loaded (2958~3034줄):
이미지 캐싱, 회전 처리, 스케일링, UI 업데이트 등
delete_current_image (755~833줄):
파일 존재 확인, 확인 대화상자 표시, 휴지통으로 이동, 북마크 제거, 인덱스 조정 등
update_bookmark_button_state (2602~2638줄):
북마크 상태 확인 및 버튼 스타일 설정
wheelEvent (2071~2097줄):
미디어 타입에 따른 쿨다운 계산 및 이미지 전환

mouse_handler.py 구현 (가장 우선)
events/handlers 패키지가 이미 존재하고 keyboard_handler.py도 구현되어 있어 확장하기 쉽습니다.
main.py의 마우스 이벤트 처리 코드(wheelEvent, mouseDoubleClickEvent 등)가 많아 모듈화 효과가 큽니다.
MediaDisplay 클래스와의 통합이 용이합니다.

window_handler.py 구현 (두 번째 우선)
마우스 이벤트와 함께 UI와 관련된 이벤트 처리의 핵심입니다.
전체화면, 최대화 등의 창 상태 관리 로직을 통합할 수 있습니다.

media_display.py 완성 및 통합 (세 번째 우선)
이미 일부 구현되어 있으나, 완전한 통합이 필요합니다.
이미지, 애니메이션, 비디오 표시 관련 메서드를 통합하면 main.py의 크기를 크게 줄일 수 있습니다.

event_dispatcher.py 구현 (네 번째 우선)
앞의 세 가지 핸들러가 구현된 후에 이를 통합하는 역할을 합니다.

core/media_viewer.py 시작 (마지막 단계)
다른 모듈화가 상당 부분 진행된 후에 시작하는 것이 효율적입니다.